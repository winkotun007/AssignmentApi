// <auto-generated />
using System;
using AssignmentAPI.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssignmentAPI.Migrations
{
    [DbContext(typeof(AssignmentDBContext))]
    [Migration("20240314093637_YourMigrationName")]
    partial class YourMigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AssignmentAPI.Models.BuildingModel", b =>
                {
                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BuildingId")
                        .HasName("PRIMARY");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("AssignmentAPI.Models.GuestAccessModel", b =>
                {
                    b.Property<string>("GuestAccessId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("isDeleteAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isGetAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPostAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPutAccess")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("GuestAccessId")
                        .HasName("PRIMARY");

                    b.ToTable("GuestAccess");
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LevelCode")
                        .HasColumnType("longtext");

                    b.Property<string>("LevelName")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LevelId")
                        .HasName("PRIMARY");

                    b.HasIndex("BuildingId");

                    b.ToTable("levels");
                });

            modelBuilder.Entity("AssignmentAPI.Models.RoomModel", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomCode")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomName")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RoomId")
                        .HasName("PRIMARY");

                    b.HasIndex("LevelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AssignmentAPI.Models.UserModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FristName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AssignmentAPI.Models.VisitorsModel", b =>
                {
                    b.Property<string>("VisitorId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Designation")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NRICNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isAcknowledged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isConfirmed14Day")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFever")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isStayHomeNotice")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("VisitorId")
                        .HasName("PRIMARY");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RoomId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.BuildingModel", "Building")
                        .WithMany("Levels")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LevelModel_BuildingModel");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("AssignmentAPI.Models.RoomModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.LevelModel", "Levels")
                        .WithMany("Rooms")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Room_Level");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("AssignmentAPI.Models.VisitorsModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.BuildingModel", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssignmentAPI.Models.LevelModel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssignmentAPI.Models.RoomModel", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Building");

                    b.Navigation("Level");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AssignmentAPI.Models.BuildingModel", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
