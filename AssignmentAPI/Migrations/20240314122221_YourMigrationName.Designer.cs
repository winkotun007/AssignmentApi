// <auto-generated />
using System;
using AssignmentAPI.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssignmentAPI.Migrations
{
    [DbContext(typeof(AssignmentDBContext))]
    [Migration("20240314122221_YourMigrationName")]
    partial class YourMigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AssignmentAPI.Models.BuildingModel", b =>
                {
                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BuildingId")
                        .HasName("PRIMARY");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = "1",
                            BuildingCode = "Oscar",
                            BuildingName = "Oscar",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(220),
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(220)
                        },
                        new
                        {
                            BuildingId = "2",
                            BuildingCode = "Hira",
                            BuildingName = "Hira",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(230),
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(230)
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.GuestAccessModel", b =>
                {
                    b.Property<string>("GuestAccessId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("isDeleteAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isGetAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPostAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isPutAccess")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("GuestAccessId")
                        .HasName("PRIMARY");

                    b.ToTable("GuestAccess");

                    b.HasData(
                        new
                        {
                            GuestAccessId = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(280),
                            Path = "api/Rooms/GetRoomsByLevel",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(280),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            Path = "/swagger/index.html",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "3",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            Path = "/api/User",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "4",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            Path = "/api/Levels/GetLevelsByBuilding",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(290),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "5",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(300),
                            Path = "/api/Visitors",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(300),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "6",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            Path = "/api/Rooms",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "7",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            Path = "/api/Levels",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "8",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            Path = "/api/Building",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(310),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "9",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(320),
                            Path = "/swagger/v1/swagger.json",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(320),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "10",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(330),
                            Path = "/api/User/UserLogin",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(330),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        },
                        new
                        {
                            GuestAccessId = "11",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(330),
                            Path = "/api/Levels/GetLevelsByBuilding",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(330),
                            isDeleteAccess = true,
                            isGetAccess = true,
                            isPostAccess = true,
                            isPutAccess = true
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LevelCode")
                        .HasColumnType("longtext");

                    b.Property<string>("LevelName")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LevelId")
                        .HasName("PRIMARY");

                    b.HasIndex("BuildingId");

                    b.ToTable("levels");

                    b.HasData(
                        new
                        {
                            LevelId = "1",
                            BuildingId = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(240),
                            LevelCode = "Level-1",
                            LevelName = "Level-1",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(240)
                        },
                        new
                        {
                            LevelId = "2",
                            BuildingId = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(250),
                            LevelCode = "Level-2",
                            LevelName = "Level-2",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(250)
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.RoomModel", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomCode")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomName")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RoomId")
                        .HasName("PRIMARY");

                    b.HasIndex("LevelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(260),
                            LevelId = "1",
                            RoomCode = "R-101",
                            RoomName = "Oscar",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(260)
                        },
                        new
                        {
                            RoomId = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(270),
                            LevelId = "2",
                            RoomCode = "R-201",
                            RoomName = "Hira",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(270)
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.UserModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FristName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "b4f0b488-8487-45bd-b2c0-4316a8e23310",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(160),
                            FristName = "Win Ko",
                            LastName = "Htun",
                            Password = "SawMrF4MIPLybRhUuydNLnFedhTP2TqS",
                            PasswordSalt = "17urfIO+0X9aVngltY8OCc7mJXkkFOqz",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(160),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.VisitorsModel", b =>
                {
                    b.Property<string>("VisitorId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Designation")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("LevelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NRICNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isAcknowledged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isConfirmed14Day")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFever")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isStayHomeNotice")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("VisitorId")
                        .HasName("PRIMARY");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RoomId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = "1",
                            BuildingId = "1",
                            CompanyName = "TestCompany",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(350),
                            Designation = "Test De",
                            FirstName = "win",
                            LastName = "ko Htun",
                            LevelId = "1",
                            NRICNumber = "14/Test",
                            PlateNumber = "5H_000",
                            RoomId = "1",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2024, 3, 14, 12, 22, 21, 17, DateTimeKind.Utc).AddTicks(350),
                            isAcknowledged = true,
                            isConfirmed14Day = false,
                            isFever = false,
                            isStayHomeNotice = false
                        });
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.BuildingModel", "Building")
                        .WithMany("Levels")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LevelModel_BuildingModel");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("AssignmentAPI.Models.RoomModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.LevelModel", "Levels")
                        .WithMany("Rooms")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Room_Level");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("AssignmentAPI.Models.VisitorsModel", b =>
                {
                    b.HasOne("AssignmentAPI.Models.BuildingModel", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssignmentAPI.Models.LevelModel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssignmentAPI.Models.RoomModel", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Building");

                    b.Navigation("Level");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AssignmentAPI.Models.BuildingModel", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("AssignmentAPI.Models.LevelModel", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
